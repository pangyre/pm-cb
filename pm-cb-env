#!/usr/bin/perl
use warnings;
use strict;
use feature qw{ say };
use open ":std", ":encoding(utf8)";

use Term::ANSIColor;
use Term::ReadKey;
use XML::LibXML;
use WWW::Mechanize;
use HTML::Entities;
use Encode;

my $debug = @ARGV && '-d' eq shift;

use constant {
    # PM_URL => 'http://www.perlmonks.org/bare/?node_id=',
    PM_URL => 'http://localhost:5000/',
    FREQ   => 10,
    # Node ids:
    LOGIN => 109,
    CB    => 207304,
};

my $user = $ENV{PM_USER};
my $pass = $ENV{PM_PASS};

unless ( $user )
{
    print "User? ";
    chomp( $user = <STDIN> );
    ReadMode('noecho');
}

unless ( $pass )
{
    print "Pass? ";
    chomp( $pass = <STDIN> );
    ReadMode('normal');
    say STDERR '*' x length $pass;
}

my $mech = 'WWW::Mechanize'->new;
$mech->get(PM_URL . LOGIN);
$mech->submit_form(
                   form_number => 1,
                   fields      => { user   => $user,
                                    passwd => $pass,
                                  });

my %seen;
my $from_id;
my $previous;

while (1) {
    my $url = PM_URL . CB;
    $url .= ";fromid=$from_id" if defined $from_id;
    $mech->get($url);

    my $xml = eval { 'XML::LibXML'->load_xml(string => $mech->content) };
    unless ( $xml )
    {
        say "Problem parsing XML from $url: ", $@ || "...unknown error";
        next;
    }

    my $page = $xml->toString;
    say $page;
    Encode::from_to( $page, "cp1252", "UTF-8" );
    say $page;
#    $xml->setEncoding("UTF-8");

    my $time = $xml->findvalue('/chatter/info/@gentimeGMT');
    print STDERR colored(['bright_black'], $time), "\r";

    my @messages = $xml->findnodes('/chatter/message');

    my $first = 1;
    for my $message (@messages) {
        print "\n" and undef $first if $first;

        my $id = $message->findvalue('message_id');
        if (exists $seen{$id}) {
            if ($debug) {
                say STDERR colored(['cyan'], "Duplicate msg $id (from $from_id");
                say STDERR colored(['cyan'], $previous, "---\n", $xml);
            }

        } else {
            say colored(['bold blue'],
                        '[', $message->findvalue('author'), '] ');
            #say decode( "UTF-8", decode_entities( encode( "UTF-8", $message->findvalue('text') ) ) );
            say decode( "cp1252", $message->findvalue('text') );
            # say  $message->findvalue('text');
            undef $seen{$id};
        }
    }

    my $new_from_id = $xml->findvalue('/chatter/message[last()]/message_id');
    $from_id = $new_from_id if length $new_from_id;

    $previous = $xml;
    sleep FREQ;
}
